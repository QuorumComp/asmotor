#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
ASMotor v0.1
\end_layout

\begin_layout Author
Carsten Elton SÃ¸rensen
\end_layout

\begin_layout Part*
ASMotor
\end_layout

\begin_layout Chapter*
Introduction
\end_layout

\begin_layout Standard
ASMotor is a portable and generic assembler engine and development system
 written in ANSI C and licensed under the GNU Public License v3.
 The package consists of the assembler, the librarian and the linker.
 It can be used as either a cross or native development system.
\end_layout

\begin_layout Standard
ASMotor first saw the light of day as RGBDS, a Gameboy development system.
 RGBDS used flex and bison and used two pass assembling.
 Since then it has been rewritten and now features a custom lexer and parser
 and the assembler does its work in only one pass, all of which make it
 much faster than the first versions.
\end_layout

\begin_layout Standard
ASMotor is largely compatible with sources written for RGBDS although there
 have been changes that will break some of this compatibility.
 The bump in the major version number indicates that compatibility is not
 ensured.
 
\end_layout

\begin_layout Section*
Features
\end_layout

\begin_layout Standard
CPU architectures:
\end_layout

\begin_layout Itemize
The Gameboy Z80 derivative
\end_layout

\begin_layout Itemize
MC680x0
\end_layout

\begin_layout Itemize
6502
\end_layout

\begin_layout Itemize
MIPS32
\end_layout

\begin_layout Standard
Object formats:
\end_layout

\begin_layout Itemize
xobj (ASMotor generic format)
\end_layout

\begin_layout Itemize
binary
\end_layout

\begin_layout Itemize
Amiga hunk object
\end_layout

\begin_layout Itemize
Amiga executable
\end_layout

\begin_layout Part*
The assembler
\begin_inset Newline newline
\end_inset

asmotor
\end_layout

\begin_layout Chapter*
Invoking asmotor
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Invoking xasm
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depending on the target CPU, the executable to invoke will be named motor,
 followed by the CPU architecture name.
 motorgb (for Gameboy), motor68k (for MC680x0), motor6502 (6502 and derivatives)
 or motormips.
\end_layout

\begin_layout Standard
The following options are supported on the command line:
\end_layout

\begin_layout Chapter*
Syntax
\end_layout

\begin_layout Standard
The syntax is line based.
 A valid line consists of an optional label, an optional machine or assembler
 instruction and an optional comment.
 Labels are described
\begin_inset CommandInset ref
LatexCommand vpageref
reference "cha:Symbols-and-labels"

\end_inset

, assembler instructions
\begin_inset CommandInset ref
LatexCommand vpageref
reference "cha:Assembler-instructions"

\end_inset

.
\end_layout

\begin_layout Section*
Comments
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Comments
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comments are ignored during assembling.
 They are an important part of writing code, this is especially true for
 assembly where comments are essential for documenting what a function does
 as it's not immediatly obvious as it may be in a high level language.
\end_layout

\begin_layout Standard
Comments are usually started with a semi-colon and end at the end of the
 line.
 A comment may also be started with a whitespace character (including a
 line break) followed by an asterisk.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Comment examples
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

* These are comment examples
\end_layout

\begin_layout Plain Layout

Label:  moveq   #1,d0   ;load register d0 with the value 1
\end_layout

\begin_layout Plain Layout

        move.l  d0,d1   *copy it to d1
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Labels
\begin_inset CommandInset label
LatexCommand label
name "cha:Symbols-and-labels"

\end_inset


\end_layout

\begin_layout Standard
One of the assembler's main tasks is to keep track of addresses so you don't
 have to remember obscure numbers but can use a meaningful name instead,
 a label.
 Labels are always placed at the beginning of a line.
\end_layout

\begin_layout Standard
Labels end with zero, one or two colons.
 If the label ends with two colons it will be automatically exported
\begin_inset Foot
status open

\begin_layout Plain Layout
see XDEF reference
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:XDEF,-EXPORT"

\end_inset

 and examples
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:Exporting-and-importing"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Symbols and labels are always case-sensitive.
\end_layout

\begin_layout Section*
Global labels
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Labels, global
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Global labels start with a character from A to Z (or their lower case equivalent
s) or an underscore.
 After that the characters a-z, A-Z, 0-9, _, @ and # may be used.
 A global label also marks the beginning of a new scope for local labels.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Label examples
\end_layout

\end_inset

GlobalLabel
\end_layout

\begin_layout Plain Layout

AnotherGlobalLabel:
\end_layout

\begin_layout Plain Layout

ExportedLabel::
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Local labels
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Labels, local
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The assembler supports local labels.
 Local labels start with the .
 character, followed by a character in the range a-z, A-Z or an underscore,
 after which the characters a-z, A-Z, 0-9, _, @ and # may be used.
 A local label is considered local to the scope in which it is defined,
 a scope begins with a global label and ends with the next global label.
 Local labels can only be referenced within the scope they are defined.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Local label examples
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

GlobalLabel:
\end_layout

\begin_layout Plain Layout

.locallabel
\end_layout

\begin_layout Plain Layout

AnotherGlobalLabel:
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Exporting and importing labels
\begin_inset Index
status collapsed

\begin_layout Plain Layout
labels, export and import
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Exporting-and-importing"

\end_inset


\end_layout

\begin_layout Standard
Most of the time programs consists of several source files that are assembled
 individually and the resulting object files then linked into an executable.
 This improves the time spent assembling and help manage a project.
\end_layout

\begin_layout Standard
To export a symbol (to let other source files use the symbol,) you use the
 keyword EXPORT (or its synonym XDEF) followed by the symbol that should
 be exported.
 To import a symbol (to make an externally defined symbol available in the
 current source file,) the keyword IMPORT (or its synonym XREF) is used.
\end_layout

\begin_layout Standard
Instead of using EXPORT or XDEF to export a label, the label may end with
 two colons.
\end_layout

\begin_layout Standard
Often you will want to make a header file for these definitions that other
 source files can include for easy access to the symbols you have exported.
 However, if you want to include the file yourself, for instance if it contains
 structure definitions, it becomes slightly complicated - if a symbol is
 first imported in the include file and later appears as a label, you have
 multiple definitions of the symbol.
 The assembler provides a third keyword, GLOBAL, that either imports or
 exports a symbol, depending on whether it appears as a label in the current
 source file.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Import and export examples
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

EXPORT  GlobalLabel
\end_layout

\begin_layout Plain Layout

XREF    ImportedLabel
\end_layout

\begin_layout Plain Layout

GLOBAL  AnotherImport,AnExportedLabel
\end_layout

\begin_layout Plain Layout

GlobalLabel:
\end_layout

\begin_layout Plain Layout

AnExportedLabel:
\end_layout

\begin_layout Plain Layout

AutomaticExport::
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that all three assembler instructions accept a comma separated list
 of labels.
\end_layout

\begin_layout Chapter*
The macro language
\end_layout

\begin_layout Standard
The macro language is an interpreted language that offers features which
 make an assembly source more readable.
 It also offers fine control over how the source is assembled.
\end_layout

\begin_layout Section*
Integer symbols
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Symbols, integer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of hardcoding constants it's often better to give them a name.
 The assembler supports two kinds of integer symbols, one that is constant
 and one that may change its value during assembling.
 The assembler instruction EQU is used to define constants and SET is used
 for variables.
 Instead of SET it's also possible use =.
 Note that an integer symbol is never followed by a colon.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Constant and variable examples
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

INTF_MASTER EQU $4000
\end_layout

\begin_layout Plain Layout

MyCounter   SET 0
\end_layout

\begin_layout Plain Layout

MyCounter   =   MyCounter+1 ;Increment MyCounter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Integer symbols are often used to define the offsets of structure members.
 While the EQU instruction can be used for this it quickly becomes cumbersome
 when adding, reordering or removing members from the structure.
 The assembler provides a group of instructions to make this easier, see
 the RS group of instructions
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:RS-GROUP"

\end_inset


\end_layout

\begin_layout Standard
Like labels constants can also be exported, if the chosen object format
 supports it.
\end_layout

\begin_layout Section*
String symbols
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Symbols, strings
\end_layout

\end_inset


\end_layout

\begin_layout Standard
String symbols are used to assign a name to an often used string.
 These symbols are expanded to their value whenever the assembler encounters
 the assigned name.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
String symbol example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

COUNTREG EQUS "[hl+]"
\end_layout

\begin_layout Plain Layout

         ld   a,COUNTREG
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example above will be interpreted as
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
String symbol expansion
\end_layout

\end_inset

         ld   a,[hl+]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
String symbols can also be used to define small macros
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Multiline string symbol
\end_layout

\end_inset

PUSHA    EQUS "push af
\backslash
npush bc
\backslash
npush de
\backslash
npush hl
\backslash
n"
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Macros
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Macros
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One of the most useful features of an assembler is the ability to write
 macros.
 Macros also provide a method of passing arguments to them and they can
 then react to the input using conditional assembling constructs.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

MyMacro: MACRO
\end_layout

\begin_layout Plain Layout

         ld   a,80
\end_layout

\begin_layout Plain Layout

         call MyFunc
\end_layout

\begin_layout Plain Layout

         ENDM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example above is a very simple macro.
 You use the macro by using its name where you would normally use an instruction.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro expansion
\end_layout

\end_inset

         add a,b
\end_layout

\begin_layout Plain Layout

         ld  sp,hl
\end_layout

\begin_layout Plain Layout

         MyMacro  ;This will be expanded
\end_layout

\begin_layout Plain Layout

         sub a,87
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the assembler sees MyMacro it will insert the macro definition, the
 text enclosed in MACRO/ENDM.
\end_layout

\begin_layout Subsection*
Macro loops
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Macro loops
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Often macros will contains loops, such as:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro with loop
\end_layout

\end_inset

LoopMacro: MACRO
\end_layout

\begin_layout Plain Layout

           xor a,a
\end_layout

\begin_layout Plain Layout

.loop      ld  [hl+],a
\end_layout

\begin_layout Plain Layout

           dec c
\end_layout

\begin_layout Plain Layout

           jr  nz,.loop
\end_layout

\begin_layout Plain Layout

           ENDM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will work fine, until you start using the macro more than once per
 scope.
 To get around this problem there is a special label string equate called
 
\backslash
@ that you can append to your labels and it will then expand to a unique
 string.
 
\backslash
@ also works in REPT-blocks.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro with unique local label
\end_layout

\end_inset

LoopMacro: MACRO
\end_layout

\begin_layout Plain Layout

           xor a,a
\end_layout

\begin_layout Plain Layout

.loop
\backslash
@    ld  [hl+],a
\end_layout

\begin_layout Plain Layout

           dec c
\end_layout

\begin_layout Plain Layout

           jr  nz,.loop
\backslash
@
\end_layout

\begin_layout Plain Layout

           ENDM
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Arguments
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Macro arguments
\end_layout

\end_inset


\end_layout

\begin_layout Standard
LoopMacro above would be a lot nicer if you didn't have to preload the registers
 with values and then call it.
 Fortunately it's possible to pass arguments to a macro, the LoopMacro example
 would then be able to load the registers itself.
\end_layout

\begin_layout Standard
In macros you can get the arguments by using the special macro string equates
 
\backslash
1 through 
\backslash
9, 
\backslash
1 being the first argument specified on the call of the macro.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro with two arguments
\end_layout

\end_inset

LoopMacro: MACRO
\end_layout

\begin_layout Plain Layout

           ld  hl,
\backslash
1
\end_layout

\begin_layout Plain Layout

           ld  c,
\backslash
2
\end_layout

\begin_layout Plain Layout

           xor a,a
\end_layout

\begin_layout Plain Layout

.loop
\backslash
@    ld  [hl+],a
\end_layout

\begin_layout Plain Layout

           dec c
\end_layout

\begin_layout Plain Layout

           jr  nz,.loop
\backslash
@
\end_layout

\begin_layout Plain Layout

           ENDM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The macro now accepts two arguments.
 The first being an address and the second being a byte count.
 The macro will then set all bytes in this range to zero.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Invoking Macro with arguments
\end_layout

\end_inset

           LoopMacro MyVars,54
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can specify up to nine arguments when calling a macro.
 Arguments are passed as string equates, there's no need to enclose them
 in quotes.
 As the arguments are considered strings, this means that it's a good idea
 to use brackets around 
\backslash
1-
\backslash
9 if you perform further calculations on them.
 Consider the following scenario:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro argument caveat
\end_layout

\end_inset

PrintValue: MACRO
\end_layout

\begin_layout Plain Layout

            PRINTV 
\backslash
1*2
\end_layout

\begin_layout Plain Layout

            ENDM
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            PrintValue 1+2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here the assembler will print the value 5 on screen and not 6 as you might
 expect.
 The solution is to enclose 
\backslash
1 in brackets:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro argument caveat fix
\end_layout

\end_inset

PrintValue: MACRO
\end_layout

\begin_layout Plain Layout

            PRINTV (
\backslash
1)*2
\end_layout

\begin_layout Plain Layout

            ENDM
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sometimes it may be necessary to pass a comma into a macro.
 To do this, the macro argument can be enclosed in angle brackets:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

PrintString: MACRO
\end_layout

\begin_layout Plain Layout

             lea  .string
\backslash
@(PC),a0
\end_layout

\begin_layout Plain Layout

             jsr  _print
\end_layout

\begin_layout Plain Layout

             bra  .skip
\backslash
@
\end_layout

\begin_layout Plain Layout

.string
\backslash
@    dc.b 
\backslash
1
\end_layout

\begin_layout Plain Layout

             EVEN
\end_layout

\begin_layout Plain Layout

.skip
\backslash
@
\end_layout

\begin_layout Plain Layout

             ENDM
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

             PrintString <"Hello,"," world",0>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
The special argument 
\backslash
0
\end_layout

\begin_layout Standard
Particularly useful on MC680x0, it's also possible to use the special argument
 
\backslash
0.
 To pass a value into 
\backslash
0 you append a dot (.) followed by the value to the macro name.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Macro argument 
\backslash
0
\end_layout

\end_inset

push: MACRO
\end_layout

\begin_layout Plain Layout

      movem.
\backslash
0 
\backslash
1,-(sp)
\end_layout

\begin_layout Plain Layout

      ENDM
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      push.l   d0-a6
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Final notes
\end_layout

\begin_layout Standard
A colon (:) following the macro-name is required, macros cannot be exported
 or imported and it's valid to call a macro from a macro (even the same
 one for recursive behaviour).
 See also SHIFT
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:SHIFT"

\end_inset

.
\end_layout

\begin_layout Section*
Predeclared symbols
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Symbols, predeclared
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Integer expressions
\end_layout

\begin_layout Section*
String expressions
\end_layout

\begin_layout Section*
Outputting messages
\end_layout

\begin_layout Standard
PRINTT/FAIL/WARN
\end_layout

\begin_layout Section*
Repeating blocks
\end_layout

\begin_layout Section*
Conditional assembling
\end_layout

\begin_layout Section*
Using macros
\end_layout

\begin_layout Chapter*
Assembler instructions reference
\begin_inset CommandInset label
LatexCommand label
name "cha:Assembler-instructions"

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
Assembler instructions
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assembler instructions are not machine instructions but rather instructions
 to the assembler that offer control over how the source is assembled, provide
 methods to define data and ways to partition code and data into logical
 groups and units.
 
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:RS-GROUP"

\end_inset

RSRESET
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RSRESET
\end_layout

\end_inset

, RSSET
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RSSET
\end_layout

\end_inset

, RS
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RS
\end_layout

\end_inset

/RB
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RB
\end_layout

\end_inset

/RW
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RW
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Defines a structure
\end_layout

\begin_layout Section*
SHIFT
\begin_inset CommandInset label
LatexCommand label
name "sec:SHIFT"

\end_inset


\end_layout

\begin_layout Standard
SHIFT
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:XDEF,-EXPORT"

\end_inset

XDEF
\begin_inset Index
status collapsed

\begin_layout Plain Layout
XDEF
\end_layout

\end_inset

, EXPORT
\begin_inset Index
status collapsed

\begin_layout Plain Layout
EXPORT
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Exports a symbol.
\end_layout

\begin_layout Section*
\begin_inset CommandInset label
LatexCommand label
name "sec:XDEF,-EXPORT"

\end_inset

XREF
\begin_inset Index
status collapsed

\begin_layout Plain Layout
XREF
\end_layout

\end_inset

, IMPORT
\begin_inset Index
status collapsed

\begin_layout Plain Layout
IMPORT
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Imports a symbol.
\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex

\end_inset


\end_layout

\end_body
\end_document
